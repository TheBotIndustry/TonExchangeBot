from aiogram import types
from aiogram.dispatcher import FSMContext

from handlers.my_adverts.create_advert import CreateAdvertStatesGroup
from keyboards.exchange import create_advert_limit_keyboard, create_advert_price_keyboard, \
    create_advert_subcategory_keyboard, create_advert_category_keyboard, create_advert_currency_keyboard, \
    create_advert_cryptocurrency_keyboard, create_advert_comment_keyboard
from loader import dp, database
from utils.other.operations_with_cryptocurrency import spaceAmount


@dp.callback_query_handler(text="continueCreateAdvert", state='*')
async def continueCreateAdvert_handler(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state(False)
    data = await state.get_data()
    if data.get('limitHigh'):
        category = await database.get_category(data.get('category_id'))
        subcategory = await database.get_subcategory(data.get('subcategory_id'))
        course = await database.get_course(data.get('cryptocurrency'))
        my_course_text = ""
        if data.get('fixPrice'):
            if data['currency'] == "USD":
                my_course_text = f'${data["fixPrice"]}'
            elif data['currency'] == "RUB":
                my_course_text = f'{data["fixPrice"]} ‚ÇΩ'
        else:
            my_percent = 100 + data['percent'] if data['decimalPercent'] == "+" else 100 - data['percent']
            if data['currency'] == "USD":
                my_course_text = f'${await spaceAmount(round(course.course / 100 * my_percent, 2))} ({data["decimalPercent"]}{data["percent"]}%)'
            elif data['currency'] == "RUB":
                my_course_text = f'{await spaceAmount(round(course.course_rub / 100 * my_percent, 2))} ‚ÇΩ ({data["decimalPercent"]}{data["percent"]}%)'

        buy_or_sell_text = "–ø–æ–∫—É–ø–∞—Ç–µ–ª—å" if data['is_sell'] == True else "–ø—Ä–æ–¥–∞–≤–µ—Ü"
        key = await create_advert_comment_keyboard()
        await call.message.edit_text(f"<b>‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>\n\n"
                                     f"<b>{data['is_sell_text']} {data['cryptocurrency']}</b> –∑–∞ <b>{data['currency']}</b>\n\n"
                                     f"<b>‚àô –°–ø–æ—Å–æ–± {data['select_payment_text']} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                                     f"<b>‚àô –í–∞—à –∫—É—Ä—Å {data['cryptocurrency']}:</b> {my_course_text}\n"
                                     f"<b>‚àô –õ–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫:</b> {data['limitLow']}-{data['limitHigh']} {data['cryptocurrency']}\n\n"
                                     f"üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å {buy_or_sell_text} –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–¥–µ–ª–∫–∏, –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:",
                                     reply_markup=key, disable_web_page_preview=True)
        await CreateAdvertStatesGroup.set_comment.set()
    elif data.get('fixPrice') or data.get('percent'):
        category = await database.get_category(data.get('category_id'))
        subcategory = await database.get_subcategory(data.get('subcategory_id'))
        course = await database.get_course(data['cryptocurrency'])
        my_course_text = ""
        if data.get('fixPrice'):
            if data['currency'] == "USD":
                my_course_text = f'${data["fixPrice"]}'
            elif data['currency'] == "RUB":
                my_course_text = f'{data["fixPrice"]} ‚ÇΩ'
        else:
            my_percent = 100 + data['percent'] if data['decimalPercent'] == "+" else 100 - data['percent']
            if data['currency'] == "USD":
                my_course_text = f'${await spaceAmount(round(course.course / 100 * my_percent, 2))} ({data["decimalPercent"]}{data["percent"]}%)'
            elif data['currency'] == "RUB":
                my_course_text = f'{await spaceAmount(round(course.course_rub / 100 * my_percent, 2))} ‚ÇΩ ({data["decimalPercent"]}{data["percent"]}%)'
        key = await create_advert_limit_keyboard(data['subcategory_id'])
        await call.message.edit_text(f"<b>‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>\n\n"
                                     f"<b>{data['is_sell_text']} {data['cryptocurrency']}</b> –∑–∞ <b>{data['currency']}</b>\n\n"
                                     f"<b>‚àô –°–ø–æ—Å–æ–± {data['select_payment_text']} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                                     f"<b>‚àô –í–∞—à –∫—É—Ä—Å {data['cryptocurrency']}:</b> {my_course_text}\n\n"
                                     f"üëâ –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫ –≤ {data['cryptocurrency']} (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: 10-100):",
                                     reply_markup=key, disable_web_page_preview=True)
        await CreateAdvertStatesGroup.set_limit.set()
    elif data.get('subcategory_id'):
        category = await database.get_category(data.get('category_id'))
        subcategory = await database.get_subcategory(data.get('subcategory_id'))
        course = await database.get_course(data['cryptocurrency'])
        course_text = ""
        language_mode = ""
        if data['currency'] == "USD":
            course_text = f'${await spaceAmount(course.course)}'
        elif data['currency'] == "RUB":
            course_text = f'{await spaceAmount(course.course_rub)} ‚ÇΩ'
            language_mode = "ru/"
        await state.update_data(language_mode=language_mode)
        key = await create_advert_price_keyboard(data['category_id'])
        if data['cryptocurrency'].lower() == 'ton':
            crypto_for_site = 'toncoin'
        else:
            crypto_for_site = data['cryptocurrency'].lower()
        await call.message.edit_text(f"<b>‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>\n\n"
                                     f"<b>{data['is_sell_text']} {data['cryptocurrency']}</b> –∑–∞ <b>{data['currency']}</b>\n\n"
                                     f"<b>‚àô –°–ø–æ—Å–æ–± {data['select_payment_text']} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n\n"
                                     f"<a href='https://coinmarketcap.com/{language_mode}currencies/{crypto_for_site}/'>–ö—É—Ä—Å {data['cryptocurrency']}</a>: {course_text}\n\n"
                                     f"üëâ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–ª–∏ —Ä–∞–∑–Ω–∏—Ü—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –∫—É—Ä—Å–∞:\n\n"
                                     f"‚ùó –ß–∏—Å–ª–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä–æ–±–Ω–æ–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É. (3.7) –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ –∑–Ω–∞–∫–æ–º. (+3.5 –∏–ª–∏ -6)",
                                     reply_markup=key, disable_web_page_preview=True)
        await CreateAdvertStatesGroup.enter_price.set()
    elif data.get('category_id'):
        category = await database.get_category(data['category_id'])
        key = await create_advert_subcategory_keyboard(data['currency'], data['category_id'])
        await call.message.edit_text(f"<b>‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>\n\n"
                                     f"<b>{data['is_sell_text']} {data['cryptocurrency']}</b> –∑–∞ <b>{data['currency']}</b> ({category.name})\n\n"
                                     f"üëâ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è —Å–µ–±—è —Å–ø–æ—Å–æ–± {data['select_payment_text']} –¥–µ–Ω–µ–≥:",
                                     reply_markup=key)
    elif data.get('currency'):
        key = await create_advert_category_keyboard(data['cryptocurrency'], data['currency'])
        await call.message.edit_text(f"<b>‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>\n\n"
                                     f"<b>{data['is_sell_text']} {data['cryptocurrency']}</b> –∑–∞ <b>{data['currency']}</b>\n\n"
                                     f"üëâ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:",
                                     reply_markup=key)
    elif data.get('cryptocurrency'):
        key = await create_advert_currency_keyboard(data['is_sell_original'])
        await call.message.edit_text(f"<b>‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>\n\n"
                                     f"<b>{data['is_sell_text']} {data['cryptocurrency']}</b>\n\n"
                                     f"üëâ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞:",
                                     reply_markup=key)
    else:
        key = await create_advert_cryptocurrency_keyboard()
        await call.message.edit_text(f"<b>‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>\n\n"
                                     f"<b>{data['is_sell_text']}</b>\n\n"
                                     f"üëâ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ {data['is_sell_text'].lower()}:",
                                     reply_markup=key)
