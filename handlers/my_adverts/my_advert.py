from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from keyboards.exchange import my_adverts_keyboard
from keyboards.my_advert import my_advert_keyboard, my_advert_course_limit_keyboard, my_advert_course_comment_keyboard, \
    my_advert_delete_keyboard
from loader import dp, database
from utils.other.operations_with_cryptocurrency import spaceAmount


class EditMyAdvertStatesGroup(StatesGroup):
    set_course = State()
    set_limit = State()
    set_comment = State()


@dp.callback_query_handler(text_startswith='myAdvert_', state='*')
async def myAdvert_handler(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state(False)
    advert_id = call.data.split("_")[1]
    advert = await database.get_advert(advert_id)
    data = await state.get_data()
    key = await my_advert_keyboard(advert_id, data)
    is_sell_text = "–ü—Ä–æ–¥–∞—é" if advert.is_sell else "–ü–æ–∫—É–ø–∞—é"
    select_payment_text = "–ø—Ä–∏—ë–º–∞" if advert.is_sell else "–æ—Ç–ø—Ä–∞–≤–∫–∏"
    category = await database.get_category(advert.category_id)
    subcategory = await database.get_subcategory(advert.subCategory_id)
    course = await database.get_course(advert.cryptocurrency)
    my_course_text = ""
    if advert.fixPrice:
        if advert.currency == "USD":
            my_course_text = f'${advert.fixPrice}'
        elif advert.currency == "RUB":
            my_course_text = f'{advert.fixPrice} ‚ÇΩ'
    else:
        my_percent = 100 + advert.percent if advert.decimalPercent == "+" else 100 - advert.percent
        if advert.currency == "USD":
            my_course_text = f'${await spaceAmount(round(course.course / 100 * my_percent, 2))} ({advert.decimalPercent}{advert.percent}%)'
        elif advert.currency == "RUB":
            my_course_text = f'{await spaceAmount(round(course.course_rub / 100 * my_percent, 2))} ‚ÇΩ ({advert.decimalPercent}{advert.percent}%)'
    comment_text = f"\n<b>‚àô –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {advert.comment}" if advert.comment else ""
    status_text = "‚úÖ" if advert.status else "üö´"
    await call.message.edit_text(f"<b>{status_text} –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
                                 f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
                                 f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                                 f"<b>‚àô –í–∞—à –∫—É—Ä—Å {advert.cryptocurrency}:</b> {my_course_text}\n"
                                 f"<b>‚àô –õ–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫:</b> {advert.limitLow}-{advert.limitHigh} {advert.cryptocurrency}"
                                 f"{comment_text}", reply_markup=key)


@dp.callback_query_handler(text_startswith='myAdvertChangeCourse_', state='*')
async def myAdvertChangeCourse_handler(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state(False)
    advert_id = call.data.split("_")[1]
    await state.update_data(my_advert_id=advert_id)
    advert = await database.get_advert(advert_id)
    is_sell_text = "–ü—Ä–æ–¥–∞—é" if advert.is_sell else "–ü–æ–∫—É–ø–∞—é"
    select_payment_text = "–ø—Ä–∏—ë–º–∞" if advert.is_sell else "–æ—Ç–ø—Ä–∞–≤–∫–∏"
    category = await database.get_category(advert.category_id)
    subcategory = await database.get_subcategory(advert.subCategory_id)
    course = await database.get_course(advert.cryptocurrency)
    my_course_text = ""
    if advert.fixPrice:
        if advert.currency == "USD":
            my_course_text = f'${advert.fixPrice}'
        elif advert.currency == "RUB":
            my_course_text = f'{advert.fixPrice} ‚ÇΩ'
    else:
        my_percent = 100 + advert.percent if advert.decimalPercent == "+" else 100 - advert.percent
        if advert.currency == "USD":
            my_course_text = f'${await spaceAmount(round(course.course / 100 * my_percent, 2))} ({advert.decimalPercent}{advert.percent}%)'
        elif advert.currency == "RUB":
            my_course_text = f'{await spaceAmount(round(course.course_rub / 100 * my_percent, 2))} ‚ÇΩ ({advert.decimalPercent}{advert.percent}%)'
    course_text = ""
    language_mode = ""
    if advert.currency == "USD":
        course_text = f'${await spaceAmount(course.course)}'
    elif advert.currency == "RUB":
        course_text = f'{await spaceAmount(course.course_rub)} ‚ÇΩ'
        language_mode = "ru/"
    currencySourse = advert.cryptocurrency.lower()
    if currencySourse == "ton":
        currencySourse = "toncoin"
    key = await my_advert_course_limit_keyboard(advert_id)
    await call.message.edit_text(f"<b>‚úè –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
                                 f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
                                 f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                                 f"<b>‚àô –í–∞—à –∫—É—Ä—Å {advert.cryptocurrency}:</b> {my_course_text}\n"
                                 f"<b>‚àô </b><a href='https://coinmarketcap.com/{language_mode}currencies/{currencySourse}/'>–ö—É—Ä—Å {advert.cryptocurrency}:</a> {course_text}\n\n"
                                 f"üëâ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–ª–∏ —Ä–∞–∑–Ω–∏—Ü—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –∫—É—Ä—Å–∞:\n\n"
                                 f"‚ùó –ß–∏—Å–ª–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä–æ–±–Ω–æ–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É. (3.7) –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ –∑–Ω–∞–∫–æ–º. (+3.5 –∏–ª–∏ -6)",
                                 reply_markup=key, disable_web_page_preview=True)
    await EditMyAdvertStatesGroup.set_course.set()


@dp.message_handler(state=EditMyAdvertStatesGroup.set_course)
async def editMyAdvertState_set_course(message: types.Message, state: FSMContext):
    await state.reset_state(False)
    data = await state.get_data()
    try:
        await dp.bot.delete_message(message.chat.id, data['second_message'])
    except:
        pass
    await message.delete()
    advert_id = data['my_advert_id']
    advert = await database.get_advert(advert_id)
    is_sell_text = "–ü—Ä–æ–¥–∞—é" if advert.is_sell else "–ü–æ–∫—É–ø–∞—é"
    select_payment_text = "–ø—Ä–∏—ë–º–∞" if advert.is_sell else "–æ—Ç–ø—Ä–∞–≤–∫–∏"
    category = await database.get_category(advert.category_id)
    subcategory = await database.get_subcategory(advert.subCategory_id)
    course = await database.get_course(advert.cryptocurrency)
    my_course_text = ""
    if advert.fixPrice:
        if advert.currency == "USD":
            my_course_text = f'${advert.fixPrice}'
        elif advert.currency == "RUB":
            my_course_text = f'{advert.fixPrice} ‚ÇΩ'
    else:
        my_percent = 100 + advert.percent if advert.decimalPercent == "+" else 100 - advert.percent
        if advert.currency == "USD":
            my_course_text = f'${await spaceAmount(round(course.course / 100 * my_percent, 2))} ({advert.decimalPercent}{advert.percent}%)'
        elif advert.currency == "RUB":
            my_course_text = f'{await spaceAmount(round(course.course_rub / 100 * my_percent, 2))} ‚ÇΩ ({advert.decimalPercent}{advert.percent}%)'
    course_text = ""
    language_mode = ""
    if advert.currency == "USD":
        course_text = f'${await spaceAmount(course.course)}'
    elif advert.currency == "RUB":
        course_text = f'{await spaceAmount(course.course_rub)} ‚ÇΩ'
        language_mode = "ru/"
    comment_text = f"\n<b>‚àô –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {advert.comment}" if advert.comment else ""

    if message.text[0] == "+" or message.text[0] == "-":
        try:
            percent = float(message.text[1:])
            decimalPercent = message.text[0]
            await database.edit_my_advert_course(
                advert_id=advert_id,
                percent=percent,
                decimalPercent=decimalPercent
            )
            my_percent = 100 + percent if decimalPercent == "+" else 100 - percent
            my_course_text = ""
            if advert.currency == "USD":
                my_course_text = f'${await spaceAmount(round(course.course / 100 * my_percent, 2))} ({decimalPercent}{percent}%)'
            elif advert.currency == "RUB":
                my_course_text = f'{await spaceAmount(round(course.course_rub / 100 * my_percent, 2))} ‚ÇΩ ({decimalPercent}{percent}%)'
            data = await state.get_data()
            key = await my_advert_keyboard(advert_id, data)
            status_text = "‚úÖ" if advert.status else "üö´"
            second_message = await message.answer(
                f"<b>–ö—É—Ä—Å –∏–∑–º–µ–Ω—ë–Ω.</b>\n\n"
                f"<b>{status_text} –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
                f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
                f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                f"<b>‚àô –í–∞—à –∫—É—Ä—Å {advert.cryptocurrency}:</b> {my_course_text}\n"
                f"<b>‚àô –õ–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫:</b> {advert.limitLow}-{advert.limitHigh} {advert.cryptocurrency}"
                f"{comment_text}",
                reply_markup=key)
            await state.update_data(second_message=second_message.message_id)
        except:
            currencySourse = advert.cryptocurrency.lower()
            if currencySourse == "ton":
                currencySourse = "toncoin"
            key = await my_advert_course_limit_keyboard(advert_id)
            second_message = await message.answer(f"<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\n"
                                                  f"<b>‚úè –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
                                                  f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
                                                  f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                                                  f"<b>‚àô –í–∞—à –∫—É—Ä—Å {advert.cryptocurrency}:</b> {my_course_text}\n"
                                                  f"<b>‚àô </b><a href='https://coinmarketcap.com/{language_mode}currencies/{currencySourse}/'>–ö—É—Ä—Å {advert.cryptocurrency}:</a> {course_text}\n\n"
                                                  f"üëâ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–ª–∏ —Ä–∞–∑–Ω–∏—Ü—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –∫—É—Ä—Å–∞:\n\n"
                                                  f"‚ùó –ß–∏—Å–ª–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä–æ–±–Ω–æ–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É. (3.7) –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ –∑–Ω–∞–∫–æ–º. (+3.5 –∏–ª–∏ -6)",
                                                  reply_markup=key, disable_web_page_preview=True)
            await state.update_data(second_message=second_message.message_id)
            await EditMyAdvertStatesGroup.set_course.set()
    else:
        try:
            fixPrice = float(message.text)
            await database.edit_my_advert_course(
                advert_id=advert_id,
                fixPrice=fixPrice
            )
            my_course_text = ""
            if advert.currency == "USD":
                my_course_text = f'${fixPrice}'
            elif advert.currency == "RUB":
                my_course_text = f'{fixPrice} ‚ÇΩ'
            data = await state.get_data()
            key = await my_advert_keyboard(advert_id, data)
            status_text = "‚úÖ" if advert.status else "üö´"
            second_message = await message.answer(
                f"<b>–ö—É—Ä—Å –∏–∑–º–µ–Ω—ë–Ω.</b>\n\n"
                f"<b>{status_text} –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
                f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
                f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                f"<b>‚àô –í–∞—à –∫—É—Ä—Å {advert.cryptocurrency}:</b> {my_course_text}\n"
                f"<b>‚àô –õ–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫:</b> {advert.limitLow}-{advert.limitHigh} {advert.cryptocurrency}"
                f"{comment_text}",
                reply_markup=key)
            await state.update_data(second_message=second_message.message_id)
        except:
            currencySourse = advert.cryptocurrency.lower()
            if currencySourse == "ton":
                currencySourse = "toncoin"
            key = await my_advert_course_limit_keyboard(advert_id)
            second_message = await message.answer(f"<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\n"
                                                  f"<b>‚úè –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
                                                  f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
                                                  f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                                                  f"<b>‚àô –í–∞—à –∫—É—Ä—Å {advert.cryptocurrency}:</b> {my_course_text}\n"
                                                  f"<b>‚àô </b><a href='https://coinmarketcap.com/{language_mode}currencies/{currencySourse}/'>–ö—É—Ä—Å {advert.cryptocurrency}:</a> {course_text}\n\n"
                                                  f"üëâ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–ª–∏ —Ä–∞–∑–Ω–∏—Ü—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –∫—É—Ä—Å–∞:\n\n"
                                                  f"‚ùó –ß–∏—Å–ª–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä–æ–±–Ω–æ–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É. (3.7) –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ –∑–Ω–∞–∫–æ–º. (+3.5 –∏–ª–∏ -6)",
                                                  reply_markup=key, disable_web_page_preview=True)
            await state.update_data(second_message=second_message.message_id)
            await EditMyAdvertStatesGroup.set_course.set()


@dp.callback_query_handler(text_startswith='myAdvertChangeLimit_', state='*')
async def myAdvertChangeLimit_handler(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state(False)
    advert_id = call.data.split("_")[1]
    await state.update_data(my_advert_id=advert_id)
    advert = await database.get_advert(advert_id)
    is_sell_text = "–ü—Ä–æ–¥–∞—é" if advert.is_sell else "–ü–æ–∫—É–ø–∞—é"
    select_payment_text = "–ø—Ä–∏—ë–º–∞" if advert.is_sell else "–æ—Ç–ø—Ä–∞–≤–∫–∏"
    category = await database.get_category(advert.category_id)
    subcategory = await database.get_subcategory(advert.subCategory_id)
    key = await my_advert_course_limit_keyboard(advert_id)
    await call.message.edit_text(f"<b>‚úè –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
                                 f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
                                 f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                                 f"<b>‚àô –õ–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫:</b> {advert.limitLow}-{advert.limitHigh} {advert.cryptocurrency}\n\n"
                                 f"üëâ –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫ –≤ {advert.cryptocurrency} (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: 10-100):",
                                 reply_markup=key)
    await EditMyAdvertStatesGroup.set_limit.set()


@dp.message_handler(state=EditMyAdvertStatesGroup.set_limit)
async def editMyAdvertState_set_limit(message: types.Message, state: FSMContext):
    await state.reset_state(False)
    data = await state.get_data()
    try:
        await dp.bot.delete_message(message.chat.id, data['second_message'])
    except:
        pass
    await message.delete()
    advert_id = data['my_advert_id']
    advert = await database.get_advert(advert_id)
    is_sell_text = "–ü—Ä–æ–¥–∞—é" if advert.is_sell else "–ü–æ–∫—É–ø–∞—é"
    select_payment_text = "–ø—Ä–∏—ë–º–∞" if advert.is_sell else "–æ—Ç–ø—Ä–∞–≤–∫–∏"
    category = await database.get_category(advert.category_id)
    subcategory = await database.get_subcategory(advert.subCategory_id)
    limit_split = message.text.split("-")
    try:
        if len(limit_split) == 2:
            limitLow = float(limit_split[0])
            limitHigh = float(limit_split[1])
            if limitHigh > limitLow > 0:
                await database.edit_my_advert_limit(
                    advert_id=advert_id,
                    limitLow=limitLow,
                    limitHigh=limitHigh
                )
                advert = await database.get_advert(advert_id)
                course = await database.get_course(advert.cryptocurrency)
                my_course_text = ""
                if advert.fixPrice:
                    if advert.currency == "USD":
                        my_course_text = f'${advert.fixPrice}'
                    elif advert.currency == "RUB":
                        my_course_text = f'{advert.fixPrice} ‚ÇΩ'
                else:
                    my_percent = 100 + advert.percent if advert.decimalPercent == "+" else 100 - advert.percent
                    if advert.currency == "USD":
                        my_course_text = f'${await spaceAmount(round(course.course / 100 * my_percent, 2))} ({advert.decimalPercent}{advert.percent}%)'
                    elif advert.currency == "RUB":
                        my_course_text = f'{await spaceAmount(round(course.course_rub / 100 * my_percent, 2))} ‚ÇΩ ({advert.decimalPercent}{advert.percent}%)'
                comment_text = f"\n<b>‚àô –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {advert.comment}" if advert.comment else ""
                data = await state.get_data()
                key = await my_advert_keyboard(advert_id, data)
                status_text = "‚úÖ" if advert.status else "üö´"
                second_message = await message.answer(
                    f"<b>–õ–∏–º–∏—Ç—ã –∏–∑–º–µ–Ω–µ–Ω—ã.</b>\n\n"
                    f"<b>{status_text} –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
                    f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
                    f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                    f"<b>‚àô –í–∞—à –∫—É—Ä—Å {advert.cryptocurrency}:</b> {my_course_text}\n"
                    f"<b>‚àô –õ–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫:</b> {advert.limitLow}-{advert.limitHigh} {advert.cryptocurrency}"
                    f"{comment_text}",
                    reply_markup=key)
                await state.update_data(second_message=second_message.message_id)
            else:
                key = await my_advert_course_limit_keyboard(advert_id)
                second_message = await message.answer(f"<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\n"
                                                      f"<b>‚úè –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
                                                      f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
                                                      f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                                                      f"<b>‚àô –õ–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫:</b> {advert.limitLow}-{advert.limitHigh} {advert.cryptocurrency}\n\n"
                                                      f"üëâ –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫ –≤ {advert.cryptocurrency} (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: 10-100):",
                                                      reply_markup=key)
                await state.update_data(second_message=second_message.message_id)
                await EditMyAdvertStatesGroup.set_limit.set()
        else:
            key = await my_advert_course_limit_keyboard(advert_id)
            second_message = await message.answer(f"<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\n"
                                                  f"<b>‚úè –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
                                                  f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
                                                  f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                                                  f"<b>‚àô –õ–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫:</b> {advert.limitLow}-{advert.limitHigh} {advert.cryptocurrency}\n\n"
                                                  f"üëâ –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫ –≤ {advert.cryptocurrency} (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: 10-100):",
                                                  reply_markup=key)
            await state.update_data(second_message=second_message.message_id)
            await EditMyAdvertStatesGroup.set_limit.set()
    except:
        key = await my_advert_course_limit_keyboard(advert_id)
        second_message = await message.answer(f"<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\n"
                                              f"<b>‚úè –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
                                              f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
                                              f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                                              f"<b>‚àô –õ–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫:</b> {advert.limitLow}-{advert.limitHigh} {advert.cryptocurrency}\n\n"
                                              f"üëâ –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫ –≤ {advert.cryptocurrency} (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: 10-100):",
                                              reply_markup=key)
        await state.update_data(second_message=second_message.message_id)
        await EditMyAdvertStatesGroup.set_limit.set()


@dp.callback_query_handler(text_startswith='myAdvertChangeComment_', state='*')
async def myAdvertChangeComment_handler(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state(False)
    advert_id = call.data.split("_")[1]
    await state.update_data(my_advert_id=advert_id)
    advert = await database.get_advert(advert_id)
    is_sell_text = "–ü—Ä–æ–¥–∞—é" if advert.is_sell else "–ü–æ–∫—É–ø–∞—é"
    select_payment_text = "–ø—Ä–∏—ë–º–∞" if advert.is_sell else "–æ—Ç–ø—Ä–∞–≤–∫–∏"
    category = await database.get_category(advert.category_id)
    subcategory = await database.get_subcategory(advert.subCategory_id)
    comment_text = f"\n<b>‚àô –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {advert.comment}" if advert.comment else ""
    buy_or_sell_text = "–ø–æ–∫—É–ø–∞—Ç–µ–ª—å" if advert.is_sell == True else "–ø—Ä–æ–¥–∞–≤–µ—Ü"
    key = await my_advert_course_comment_keyboard(advert_id)
    await call.message.edit_text(f"<b>‚úè –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
                                 f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
                                 f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})"
                                 f"{comment_text}\n\n"
                                 f"üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å {buy_or_sell_text} –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–¥–µ–ª–∫–∏, –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:",
                                 reply_markup=key)
    await EditMyAdvertStatesGroup.set_comment.set()


@dp.message_handler(state=EditMyAdvertStatesGroup.set_comment)
async def editMyAdvertState_set_comment(message: types.Message, state: FSMContext):
    await state.reset_state(False)
    data = await state.get_data()
    try:
        await dp.bot.delete_message(message.chat.id, data['second_message'])
    except:
        pass
    await message.delete()
    advert_id = data['my_advert_id']
    await database.edit_my_advert_comment(advert_id=advert_id, comment=message.text)
    advert = await database.get_advert(advert_id)
    is_sell_text = "–ü—Ä–æ–¥–∞—é" if advert.is_sell else "–ü–æ–∫—É–ø–∞—é"
    select_payment_text = "–ø—Ä–∏—ë–º–∞" if advert.is_sell else "–æ—Ç–ø—Ä–∞–≤–∫–∏"
    category = await database.get_category(advert.category_id)
    subcategory = await database.get_subcategory(advert.subCategory_id)
    advert = await database.get_advert(advert_id)
    course = await database.get_course(advert.cryptocurrency)
    my_course_text = ""
    if advert.fixPrice:
        if advert.currency == "USD":
            my_course_text = f'${advert.fixPrice}'
        elif advert.currency == "RUB":
            my_course_text = f'{advert.fixPrice} ‚ÇΩ'
    else:
        my_percent = 100 + advert.percent if advert.decimalPercent == "+" else 100 - advert.percent
        if advert.currency == "USD":
            my_course_text = f'${await spaceAmount(round(course.course / 100 * my_percent, 2))} ({advert.decimalPercent}{advert.percent}%)'
        elif advert.currency == "RUB":
            my_course_text = f'{await spaceAmount(round(course.course_rub / 100 * my_percent, 2))} ‚ÇΩ ({advert.decimalPercent}{advert.percent}%)'
    comment_text = f"\n<b>‚àô –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {advert.comment}" if advert.comment else ""
    data = await state.get_data()
    key = await my_advert_keyboard(advert_id, data)
    status_text = "‚úÖ" if advert.status else "üö´"
    second_message = await message.answer(
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑–º–µ–Ω—ë–Ω.</b>\n\n"
        f"<b>{status_text} –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
        f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
        f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
        f"<b>‚àô –í–∞—à –∫—É—Ä—Å {advert.cryptocurrency}:</b> {my_course_text}\n"
        f"<b>‚àô –õ–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫:</b> {advert.limitLow}-{advert.limitHigh} {advert.cryptocurrency}"
        f"{comment_text}",
        reply_markup=key)
    await state.update_data(second_message=second_message.message_id)


@dp.callback_query_handler(text_startswith='myAdvertDeleteComment_', state='*')
async def myAdvertDeleteComment_handler(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state(False)
    advert_id = call.data.split("_")[1]
    await database.edit_my_advert_comment(advert_id=advert_id, comment=None)
    advert = await database.get_advert(advert_id)
    is_sell_text = "–ü—Ä–æ–¥–∞—é" if advert.is_sell else "–ü–æ–∫—É–ø–∞—é"
    select_payment_text = "–ø—Ä–∏—ë–º–∞" if advert.is_sell else "–æ—Ç–ø—Ä–∞–≤–∫–∏"
    category = await database.get_category(advert.category_id)
    subcategory = await database.get_subcategory(advert.subCategory_id)
    advert = await database.get_advert(advert_id)
    course = await database.get_course(advert.cryptocurrency)
    my_course_text = ""
    if advert.fixPrice:
        if advert.currency == "USD":
            my_course_text = f'${advert.fixPrice}'
        elif advert.currency == "RUB":
            my_course_text = f'{advert.fixPrice} ‚ÇΩ'
    else:
        my_percent = 100 + advert.percent if advert.decimalPercent == "+" else 100 - advert.percent
        if advert.currency == "USD":
            my_course_text = f'${await spaceAmount(round(course.course / 100 * my_percent, 2))} ({advert.decimalPercent}{advert.percent}%)'
        elif advert.currency == "RUB":
            my_course_text = f'{await spaceAmount(round(course.course_rub / 100 * my_percent, 2))} ‚ÇΩ ({advert.decimalPercent}{advert.percent}%)'
    comment_text = f"\n<b>‚àô –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {advert.comment}" if advert.comment else ""
    data = await state.get_data()
    key = await my_advert_keyboard(advert_id, data)
    status_text = "‚úÖ" if advert.status else "üö´"
    await call.message.edit_text(
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª—ë–Ω.</b>\n\n"
        f"<b>{status_text} –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
        f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
        f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
        f"<b>‚àô –í–∞—à –∫—É—Ä—Å {advert.cryptocurrency}:</b> {my_course_text}\n"
        f"<b>‚àô –õ–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫:</b> {advert.limitLow}-{advert.limitHigh} {advert.cryptocurrency}"
        f"{comment_text}",
        reply_markup=key)


@dp.callback_query_handler(text_startswith='myAdvertDelete_', state='*')
async def myAdvertDelete_handler(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state(False)
    advert_id = call.data.split("_")[1]
    key = await my_advert_delete_keyboard(advert_id)
    await call.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
                                 reply_markup=key)


@dp.callback_query_handler(text_startswith='myAdvertAcceptDelete_', state='*')
async def myAdvertAcceptDelete_handler(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state(False)
    advert_id = call.data.split("_")[1]
    await database.delete_advert(advert_id)
    data = await state.get_data()
    adverts = await database.get_adverts_user(call.message.chat.id, data.get('filterMyAdvert'))
    key = await my_adverts_keyboard(adverts, data)
    if not adverts:
        await call.message.edit_text("<b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.</b>\n\n"
                                     "<b>üóí –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>\n\n"
                                     "–£ –í–∞—Å –µ—â—ë –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n"
                                     "üëå –ú–æ–∂–Ω–æ –∏—Ö —Å–æ–∑–¥–∞—Ç—å.",
                                     reply_markup=key)
    else:
        await call.message.edit_text(f"<b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.</b>\n\n"
                                     f"<b>üóí –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>\n\n"
                                     f"–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:",
                                     reply_markup=key)


@dp.callback_query_handler(text_startswith='myAdvertChangeStatus_', state='*')
async def myAdvertChangeStatus_handler(call: types.CallbackQuery, state: FSMContext):
    await state.reset_state(False)
    advert_id = call.data.split("_")[1]
    advert = await database.get_advert(advert_id)
    advert_old_status = advert.status
    await database.advert_change_status(advert_id)
    advert = await database.get_advert(advert_id)
    if advert.status:
        await call.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ", show_alert=True)
    else:
        if advert_old_status:
            await call.answer("üö´ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ", show_alert=True)
        else:
            await call.answer(
                f"‚ö†  –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –Ω–∞ —Å—á–µ—Ç—É {advert.limitHigh} {advert.cryptocurrency}",
                show_alert=True)
    data = await state.get_data()
    key = await my_advert_keyboard(advert_id, data)
    is_sell_text = "–ü—Ä–æ–¥–∞—é" if advert.is_sell else "–ü–æ–∫—É–ø–∞—é"
    select_payment_text = "–ø—Ä–∏—ë–º–∞" if advert.is_sell else "–æ—Ç–ø—Ä–∞–≤–∫–∏"
    category = await database.get_category(advert.category_id)
    subcategory = await database.get_subcategory(advert.subCategory_id)
    course = await database.get_course(advert.cryptocurrency)
    my_course_text = ""
    if advert.fixPrice:
        if advert.currency == "USD":
            my_course_text = f'${advert.fixPrice}'
        elif advert.currency == "RUB":
            my_course_text = f'{advert.fixPrice} ‚ÇΩ'
    else:
        my_percent = 100 + advert.percent if advert.decimalPercent == "+" else 100 - advert.percent
        if advert.currency == "USD":
            my_course_text = f'${await spaceAmount(round(course.course / 100 * my_percent, 2))} ({advert.decimalPercent}{advert.percent}%)'
        elif advert.currency == "RUB":
            my_course_text = f'{await spaceAmount(round(course.course_rub / 100 * my_percent, 2))} ‚ÇΩ ({advert.decimalPercent}{advert.percent}%)'
    comment_text = f"\n<b>‚àô –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {advert.comment}" if advert.comment else ""
    status_text = "‚úÖ" if advert.status else "üö´"
    await call.message.edit_text(f"<b>{status_text} –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
                                 f"<b>{is_sell_text} {advert.cryptocurrency}</b> –∑–∞ <b>{advert.currency}</b>\n\n"
                                 f"<b>‚àô –°–ø–æ—Å–æ–± {select_payment_text} –¥–µ–Ω–µ–≥:</b> {subcategory.name} ({category.name})\n"
                                 f"<b>‚àô –í–∞—à –∫—É—Ä—Å {advert.cryptocurrency}:</b> {my_course_text}\n"
                                 f"<b>‚àô –õ–∏–º–∏—Ç—ã –Ω–∞ –æ—Ç–∫–ª–∏–∫:</b> {advert.limitLow}-{advert.limitHigh} {advert.cryptocurrency}"
                                 f"{comment_text}", reply_markup=key)
